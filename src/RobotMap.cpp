// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"



std::shared_ptr<Encoder> RobotMap::driveTrainLeftEncoder;
std::shared_ptr<Encoder> RobotMap::driveTrainRightEncoder;
std::shared_ptr<CANJaguar> RobotMap::driveTrainSpeedController1;
std::shared_ptr<CANJaguar> RobotMap::driveTrainSpeedController2;
std::shared_ptr<CANJaguar> RobotMap::driveTrainFrontLeftMotor;
std::shared_ptr<CANJaguar> RobotMap::driveTrainRearLeftMotor;
std::shared_ptr<CANJaguar> RobotMap::driveTrainFrontRightMotor;
std::shared_ptr<CANJaguar> RobotMap::driveTrainRearRightMotor;
std::shared_ptr<RobotDrive> RobotMap::driveTrainChassis;
std::vector<std::shared_ptr<Solenoid> > RobotMap::solenoids;



void RobotMap::init() {

    LiveWindow *lw = LiveWindow::GetInstance();

    driveTrainLeftEncoder.reset(new Encoder(0, 1,false, Encoder::k4X));
    lw->AddSensor("Drive Train", "LeftEncoder", driveTrainLeftEncoder);
    
    driveTrainRightEncoder.reset(new Encoder(2, 3,false, Encoder::k4X));
    lw->AddSensor("Drive Train", "RightEncoder", driveTrainRightEncoder);
    


    driveTrainChassis.reset(new RobotDrive(driveTrainFrontLeftMotor, driveTrainRearLeftMotor,
    		driveTrainFrontRightMotor, driveTrainRearRightMotor));
    
    driveTrainChassis->SetSafetyEnabled(false);
        driveTrainChassis->SetExpiration(0.1);
        driveTrainChassis->SetSensitivity(0.3);
        driveTrainChassis->SetMaxOutput(1.0);

    for (int i = 0; i < 8; i++) {
    	solenoids.push_back(std::make_shared<Solenoid>(0, i));
    	lw->AddActuator("Shooter", "Solenoids", solenoids[i]);
    }

    

    

    
}
