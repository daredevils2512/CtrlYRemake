// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Drive.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	frontLeftMotor = RobotMap::driveTrainFrontLeftMotor;
	rearLeftMotor = RobotMap::driveTrainRearLeftMotor;
	frontRightMotor = RobotMap::driveTrainFrontRightMotor;
	rearRightMotor = RobotMap::driveTrainRearRightMotor;
	SpeedController1 = RobotMap::driveTrainSpeedController1;
	SpeedController2 = RobotMap::driveTrainSpeedController2;
    LeftEncoder = RobotMap::driveTrainLeftEncoder;
    RightEncoder = RobotMap::driveTrainRightEncoder;
    chassis = RobotMap::driveTrainChassis;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Drive(0, 0, false));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND9
}



// Put methods for controlling this subsystem
// here. Call these from Commands.

void DriveTrain::DriveRobot(float move, float turn) {
	chassis->ArcadeDrive(move, turn, false);
}
void DriveTrain::ResetEncoders() {
	LeftEncoder->Reset();
	RightEncoder->Reset();
}
